#############################################################################################
##SAMPLE##:

#sample(data, size, replace = FALSE, prob = NULL)

#sample range lies between 1 to 5
x<- sample(1:5)
#prints the samples
x
#Output -> 3 2 1 5 4


#samples range is 1 to 5 and number of samples is 3
x<- sample(1:5, 3)
#prints the samples (3 samples)
x
#Output -> 2 4 5


#sample range is 1 to 5 and the number of samples is 6
x<- sample(1:5, 6)
x
#shows error as the range should include only 5 numbers (1:5)
#Error in sample.int(length(x), size, replace, prob) : 
#  cannot take a sample larger than the population when 'replace = FALSE'

#specifying replace=TRUE or T will allow repetition of values so that the function will generate 6 samples in the range 1 to 5. Here 2 is repeated.
x<- sample(1:5, 6, replace=T)
#Output -> 2 4 2 2 4 3

#samples without replacement 
x<-sample(1:8, 7, replace=F)
x
#Output -> 4 1 6 5 3 2 7
x<-sample(1:8, 9, replace=F)
#Error in sample.int(length(x), size, replace, prob) :
# cannot take a sample larger than the population when 'replace = FALSE'


#here the size of the sample is equal to range 'x'. 
x<- sample(1:5, 5, replace=F)
x
#Output -> 5 4 1 3 2

#----------------------------------------------------------------------------------------------
#set the index 
set.seed(5)
#takes the random samples with replacement
sample(1:5, 4, replace=T)
#2 3 1 3

set.seed(5)
sample(1:5, 4, replace=T)
#2 3 1 3

set.seed(5)
sample(1:5, 4, replace=T)
#2 3 1 3

#----------------------------------------------------------------------------------------------
#reads the dataset 'Toothgrwoth' and take the 10 rows as sample
df<- sample(1:nrow(ToothGrowth), 10)
df
#--> 53 12 16 26 37 27  9 22 28 10
#sample 10 rows
ToothGrowth[df,]

#----------------------------------------------------------------------------------------------
#creates a list of names and generates one sample from this list
sample(c('jack','Rossie','Kyle','Edwards','Joseph','Paloma','Kelly','Alok','Jolie'),1)
#--> "Rossie"
sample(c('jack','Rossie','Kyle','Edwards','Joseph','Paloma','Kelly','Alok','Jolie'),1)
#--> "Jolie"

sample(c('jack','Rossie','Kyle','Edwards','Joseph','Paloma','Kelly','Alok','Jolie'),1)
#--> "jack"

sample(c('jack','Rossie','Kyle','Edwards','Joseph','Paloma','Kelly','Alok','Jolie'),1)
#--> "Edwards"

sample(c('jack','Rossie','Kyle','Edwards','Joseph','Paloma','Kelly','Alok','Jolie'),1)
#--> "Kyle"

#----------------------------------------------------------------------------------------------
#creates a probability of 80% good watches an 20% effective watches.
sample (c('Good','Defective'), size=10, replace=T, prob=c(.80,.20))

#"Good"      "Good"      "Good"      "Defective" "Good"      "Good"     
#"Good"      "Good"      "Defective" "Good"

sample (c('Good','Defective'), size=10, replace=T, prob=c(.60,.40))

#--> "Good"      "Defective" "Good"      "Defective" "Defective" "Good"     
#"Good"      "Good"      "Defective" "Good"

# consider the vector
data=c(23,45,21,34,5)

# get 10 random elements with probability
data=c(23,45,21,34,5)
print(sample(data, size = 10, replace = TRUE, prob = c(0.6,0.1,0.1,0.1,0.1)))
#23 23 23 23 23 45 23 23 23 23

# create dataframe with 2 columns
data=data.frame(col1=c(1:10),col2=c(12:21))
# get the sample of 4 in each column
data[sample(1:nrow(data), size = 4), ]

# create list with some integers
data=list(1,2,3,4,5,6)
# get the sample of 4
data[sample(1:length(data), size = 4)]


#############################################################################################
##prob()##:

#S <- rolldie(times = 3, makespace = TRUE )
#prob(S, X1+X2 > 9 )
#prob(S, X1+X2 > 9, given = X1+X2+X3 > 7 )

sample(c("Success","Failure"),10, replace=T, prob=c(0.9,0.1))


#############################################################################################
##Conditional Probability##:
prob(C(ustomer_Data, event=Money_Spent == "High", given=Frequency == "More")

#P(B)=P(A1)P(B|A1)+P(A2)P(B|A2)+P(A3)P(B|A3)+P(A4)P(B|A5)+P(An)P(B|An)

#P(A|B), which also represents the conditional probability of Event A given that Event B has already occurred.
#P(A|B) = P(A ∩ B) / P(A)          
#This is valid only when P(A)≠ 0 i.e. when event A is not an impossible event.
#P(B|A) = P(A ∩ B) / P(B)       
#This is valid only when P(B)≠ 0 i.e. when the event B is not an impossible event.

# Library for calculation of conditional probability
#library(prob)
#library(tidyverse)

Money_Spent < - c("High", "Low", "High", "High",
                  "Low", "Low", "High", "Low", 
                  "Low", "High", "Low", "Low",
                  "High", "High", "High")
Frequency < - c("Less", "More", "More", "Less", 
                "Less", "More", "More", "Less",
                "Less", "More", "More", "Less",
                "Less", "More", "Less")
Customer < - c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
               11, 12, 13, 14, 15)

# Customer Data Frame
Customer_Data < - as.data.frame(cbind(Customer, Money_Spent, Frequency))
Customer_Data % >%
  count(Money_Spent, Frequency, sort=T)

# Creating two-way table from data frame
Customer_Data_Table < - addmargins(table("Money_Spent"=Customer_Data$Money_Spent,
                                         "Frequency"=Customer_Data$Frequency))
# view table
Customer_Data_Table

Customer_Data < - probspace(Customer_Data)
Customer_Data

# Probability of the customer spending high 
# given that they are purchasing less often
Prob(Customer_Data, event=Money_Spent == "High", given=Frequency == "Less")

# Probability of the customer spending less
# given that they are purchasing more often
Prob(Customer_Data, event=Money_Spent == "Low", given=Frequency == "More")

# Probability of the customer spending less
# given that they are purchasing less often
Prob(Customer_Data, event=Money_Spent == "Low", given=Frequency == "Less")

# Probability of the customer spending high 
# given that they are purchasing more often
Prob(Customer_Data, event=Money_Spent == "High", given=Frequency == "More")


#############################################################################################
##Total Probability##:
#############################################################################################
##BAYES THEOREM##

#Function for Bayes' Theorem
##P(A|B)=P(B|A)*P(A) / P(B)
bayesTheorem <- function(pA, pB, pBA) {
  pAB <- pA * pBA / pB
  return(pAB)
}
#Define probabilities
#pRain <- 0.2
#pCloudy <- 0.4
3pCloudyRain <- .85
#Function to calculate conditional probability
#bayesTheorem(pRain, pCloudy, pCloudyRain)
#OR
PAB<-function(PBA,PA,PB){ (PBA*PA)/PB}
PAB(0.85, 0.2, 0.4)

#define function for Bayes' Theorem
bayesTheorem <- function(pA, pB, pBA) {
  pAB <- pA * pBA / pB
  return(pAB)
}

#define probabilities
pRain <- 0.2
pCloudy <- 0.4
pCloudyRain <- .85

#use function to calculate conditional probability
bayesTheorem(pRain, pCloudy, pCloudyRain)
